name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_RESOURCE_GROUP_NAME:
        required: true
      DISPATCHER_FA_NAME:
        required: true
      PROCESSOR_FA_NAME:
        required: true

env:
  CARGO_BUILD_ARGS: --release --verbose

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: true
      matrix:
        service: [dispatcher, processor]
        include:
          - service: dispatcher
            package: wfinfo_dispatcher
            fa_name_var: DISPATCHER_FA_NAME
          - service: processor
            package: wfinfo_processor
            fa_name_var: PROCESSOR_FA_NAME
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log into Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl
          components: rustfmt, clippy
          override: true
      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: deploy-${{ matrix.service }}-${{ inputs.environment }}
      - name: Install musl-gcc and dependencies
        shell: bash
        run: |-
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y musl-tools
      - name: Build ${{ matrix.service }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p ${{ matrix.package }} ${{ env.CARGO_BUILD_ARGS }}
      - name: Prepare ${{ matrix.service }}
        shell: bash
        run: |-
          mkdir -p ./services/${{ matrix.package }}/func/bin
          cp ./target/cargo/release/${{ matrix.package }} ./services/${{ matrix.package }}/func/bin/handler
      - name: Deploy ${{ matrix.service }}
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets[matrix.fa_name_var] }}
          package: ./services/${{ matrix.package }}/func
          respect-funcignore: true
  register:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Get commands function_endpoint
        id: get_func
        uses: Azure/cli@v1
        with:
          inlineScript: |-
            FUNC_URL=$( \
              az functionapp function show \
                --name ${{ secrets.PROCESSOR_FA_NAME }} \
                --function-name commands \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
                --query 'invokeUrlTemplate' \
                --output tsv \
            )
            FUNC_CODE=$( \
              az functionapp function keys list \
                --name ${{ secrets.PROCESSOR_FA_NAME }} \
                --function-name commands \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
                --query 'default'
                --output tsv
            )
            echo "::set-output name=func_url::$FUNC_URL"
            echo "::set-output name=func_code::$FUNC_CODE"
      - name: Register commands function
        shell: bash
        run: |-
          curl \
            --request POST \
            --header 'content-type: application/json' \
            --data '{ "type": "register_commands" }' \
            --fail \
            "${{ steps.get_func.outputs.func_url }}?code=${{ steps.get_func.outputs.func_code }}"
